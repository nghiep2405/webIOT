import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import requests

API_BASE_URL = "http://localhost:8000"

def get_sound_history():
    """L·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ s·ª≠ d·ª•ng √¢m thanh"""
    try:
        response = requests.get(f"{API_BASE_URL}/get-sound-history")
        if response.status_code == 200:
            return response.json().get("history", [])
        else:
            st.error(f"L·ªói l·∫•y l·ªãch s·ª≠: {response.text}")
            return []
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi API: {e}")
        return []

def display_sound_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠ d·ª•ng √¢m thanh"""
    st.header("üìã Th·ªëng K√™ S·ª≠ D·ª•ng √Çm Thanh")
    
    # T·∫°o tabs ƒë·ªÉ ph√¢n chia hi·ªÉn th·ªã
    tab1, tab2, tab3 = st.tabs(["üìä T·∫•t C·∫£ L·ªãch S·ª≠", "üë§ L·ªçc Theo Ng∆∞·ªùi D√πng", "üéµ L·ªçc Theo B·∫£n Ghi √Çm"])
    
    with tab1:
        history_data = get_sound_history()
        if history_data:
            # T·∫°o DataFrame
            df = pd.DataFrame(history_data)
            
            # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªïng L∆∞·ª£t S·ª≠ D·ª•ng", len(history_data))
            with col2:
                unique_users = df['user_name'].nunique()
                st.metric("S·ªë Ng∆∞·ªùi D√πng", unique_users)
            with col3:
                if len(history_data) > 0:
                    most_used = df['sound_name'].value_counts().index[0]
                    st.metric("√Çm Thanh Ph·ªï Bi·∫øn", most_used)
            
            # Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠ v·ªõi sorting options
            st.write("**Chi Ti·∫øt L·ªãch S·ª≠:**")
            
            # Th√™m options ƒë·ªÉ sort
            col_sort, col_order = st.columns([2, 1])
            with col_sort:
                sort_column = st.selectbox(
                    "S·∫Øp x·∫øp theo:",
                    ["M·∫∑c ƒë·ªãnh", "T√†i Kho·∫£n", "B·∫£n Ghi √Çm", "Th·ªùi Gian"],
                    key="sort_column_all"
                )
            with col_order:
                sort_ascending = st.selectbox(
                    "Th·ª© t·ª±:",
                    ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                    key="sort_order_all"
                ) == "TƒÉng d·∫ßn"
            
            # Chu·∫©n b·ªã DataFrame ƒë·ªÉ hi·ªÉn th·ªã
            display_df = df[['user_name', 'sound_name', 'timestamp']].copy()
            display_df.columns = ['T√†i Kho·∫£n', 'B·∫£n Ghi √Çm', 'Th·ªùi Gian']
            
            # Th·ª±c hi·ªán sort tr√™n to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc khi ph√¢n trang
            if sort_column != "M·∫∑c ƒë·ªãnh":
                if sort_column == "Th·ªùi Gian":
                    # Convert timestamp to datetime for proper sorting
                    display_df['Th·ªùi Gian'] = pd.to_datetime(display_df['Th·ªùi Gian'])
                
                display_df = display_df.sort_values(
                    by=sort_column, 
                    ascending=sort_ascending
                )
            
            # Reset index sau khi sort
            display_df.reset_index(drop=True, inplace=True)
            display_df.index = display_df.index + 1
            display_df.index.name = 'STT'
            
            # Hi·ªÉn th·ªã v·ªõi pagination
            items_per_page = 10
            total_items = len(display_df)
            total_pages = (total_items - 1) // items_per_page + 1
            
            if total_pages > 1:
                page = st.selectbox("Ch·ªçn trang:", range(1, total_pages + 1), key="history_page")
                start_idx = (page - 1) * items_per_page
                end_idx = start_idx + items_per_page
                
                # Hi·ªÉn th·ªã v·ªõi index b·∫Øt ƒë·∫ßu t·ª´ s·ªë th·ª© t·ª± th·ª±c t·∫ø
                page_df = display_df.iloc[start_idx:end_idx].copy()
                
                # Adjust index to show correct row numbers for current page
                page_df.index = range(start_idx + 1, min(end_idx + 1, total_items + 1))
                page_df.index.name = 'STT'
                
                st.dataframe(page_df, use_container_width=True)
                st.write(f"Hi·ªÉn th·ªã {start_idx + 1}-{min(end_idx, total_items)} c·ªßa {total_items} b·∫£n ghi")
            else:
                st.dataframe(display_df, use_container_width=True)
        else:
            st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ s·ª≠ d·ª•ng n√†o.")
    
    with tab2:
        # L·∫•y danh s√°ch t·∫•t c·∫£ user ƒë·ªÉ filter
        all_history = get_sound_history()
        if all_history:
            all_users = list(set([record['user_name'] for record in all_history]))
            selected_user = st.selectbox("Ch·ªçn t√†i kho·∫£n:", ["T·∫•t c·∫£"] + sorted(all_users), key="user_filter")
            
            if selected_user != "T·∫•t c·∫£":
                user_history = [record for record in all_history if record['user_name'] == selected_user]
                if user_history:
                    df_user = pd.DataFrame(user_history)
                    
                    # Th√™m sorting cho tab user
                    col_sort_user, col_order_user = st.columns([2, 1])
                    with col_sort_user:
                        sort_column_user = st.selectbox(
                            "S·∫Øp x·∫øp theo:",
                            ["M·∫∑c ƒë·ªãnh", "B·∫£n Ghi √Çm", "Th·ªùi Gian"],
                            key="sort_column_user"
                        )
                    with col_order_user:
                        sort_ascending_user = st.selectbox(
                            "Th·ª© t·ª±:",
                            ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                            key="sort_order_user"
                        ) == "TƒÉng d·∫ßn"
                    
                    display_df_user = df_user[['sound_name', 'timestamp']].copy()
                    display_df_user.columns = ['B·∫£n Ghi √Çm', 'Th·ªùi Gian']
                    
                    # Sort if needed
                    if sort_column_user != "M·∫∑c ƒë·ªãnh":
                        if sort_column_user == "Th·ªùi Gian":
                            display_df_user['Th·ªùi Gian'] = pd.to_datetime(display_df_user['Th·ªùi Gian'])
                        
                        display_df_user = display_df_user.sort_values(
                            by=sort_column_user, 
                            ascending=sort_ascending_user
                        )
                    
                    # Th√™m c·ªôt STT b·∫Øt ƒë·∫ßu t·ª´ 1
                    display_df_user.reset_index(drop=True, inplace=True)
                    display_df_user.index = display_df_user.index + 1
                    display_df_user.index.name = 'STT'
                    
                    st.write(f"**L·ªãch s·ª≠ c·ªßa {selected_user}:**")
                    st.dataframe(display_df_user, use_container_width=True)
                    
                    # Th·ªëng k√™ cho user n√†y
                    st.write("**Th·ªëng k√™:**")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("T·ªïng l∆∞·ª£t s·ª≠ d·ª•ng", len(user_history))
                    with col2:
                        if len(user_history) > 0:
                            most_used_by_user = df_user['sound_name'].value_counts().index[0]
                            st.metric("√Çm thanh hay d√πng nh·∫•t", most_used_by_user)
                else:
                    st.info(f"Ng∆∞·ªùi d√πng {selected_user} ch∆∞a c√≥ l·ªãch s·ª≠ s·ª≠ d·ª•ng.")
            else:
                st.info("Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n c·ª• th·ªÉ ƒë·ªÉ xem l·ªãch s·ª≠.")
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·ªçc.")
    
    with tab3:
        # L·ªçc theo b·∫£n ghi √¢m
        all_history = get_sound_history()
        if all_history:
            all_sounds = list(set([record['sound_name'] for record in all_history]))
            selected_sound = st.selectbox("Ch·ªçn b·∫£n ghi √¢m:", ["T·∫•t c·∫£"] + sorted(all_sounds), key="sound_filter")
            
            if selected_sound != "T·∫•t c·∫£":
                sound_history = [record for record in all_history if record['sound_name'] == selected_sound]
                if sound_history:
                    df_sound = pd.DataFrame(sound_history)
                    
                    # Th√™m sorting cho tab sound
                    col_sort_sound, col_order_sound = st.columns([2, 1])
                    with col_sort_sound:
                        sort_column_sound = st.selectbox(
                            "S·∫Øp x·∫øp theo:",
                            ["M·∫∑c ƒë·ªãnh", "T√†i Kho·∫£n", "Th·ªùi Gian"],
                            key="sort_column_sound"
                        )
                    with col_order_sound:
                        sort_ascending_sound = st.selectbox(
                            "Th·ª© t·ª±:",
                            ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                            key="sort_order_sound"
                        ) == "TƒÉng d·∫ßn"
                    
                    display_df_sound = df_sound[['user_name', 'timestamp']].copy()
                    display_df_sound.columns = ['T√†i Kho·∫£n', 'Th·ªùi Gian']
                    
                    # Sort if needed
                    if sort_column_sound != "M·∫∑c ƒë·ªãnh":
                        if sort_column_sound == "Th·ªùi Gian":
                            display_df_sound['Th·ªùi Gian'] = pd.to_datetime(display_df_sound['Th·ªùi Gian'])
                        
                        display_df_sound = display_df_sound.sort_values(
                            by=sort_column_sound, 
                            ascending=sort_ascending_sound
                        )
                    
                    # Th√™m c·ªôt STT b·∫Øt ƒë·∫ßu t·ª´ 1
                    display_df_sound.reset_index(drop=True, inplace=True)
                    display_df_sound.index = display_df_sound.index + 1
                    display_df_sound.index.name = 'STT'
                    
                    st.write(f"**L·ªãch s·ª≠ s·ª≠ d·ª•ng b·∫£n ghi √¢m: {selected_sound}**")
                    st.dataframe(display_df_sound, use_container_width=True)
                    
                    # Th·ªëng k√™ cho b·∫£n ghi √¢m n√†y
                    st.write("**Th·ªëng k√™:**")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("T·ªïng l∆∞·ª£t ph√°t", len(sound_history))
                    with col2:
                        unique_users_for_sound = df_sound['user_name'].nunique()
                        st.metric("S·ªë ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng", unique_users_for_sound)
                    with col3:
                        if len(sound_history) > 0:
                            most_active_user = df_sound['user_name'].value_counts().index[0]
                            st.metric("Ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t", most_active_user)
                    
                    # Bi·ªÉu ƒë·ªì th·ªëng k√™ ng∆∞·ªùi d√πng
                    st.write("**Th·ªëng k√™ theo ng∆∞·ªùi d√πng:**")
                    user_counts = df_sound['user_name'].value_counts()
                    st.bar_chart(user_counts)
                else:
                    st.info(f"B·∫£n ghi √¢m {selected_sound} ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
            else:
                st.info("Vui l√≤ng ch·ªçn m·ªôt b·∫£n ghi √¢m c·ª• th·ªÉ ƒë·ªÉ xem th·ªëng k√™.")
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·ªçc.")
            
# Ph·∫ßn bi·ªÉu ƒë·ªì c≈© (c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c b·ªè t√πy √Ω)
def display_old_charts():
    st.header("üìà Bi·ªÉu ƒê·ªì M·∫´u")
    
    tab1, tab2 = st.tabs(["üìà Customer per day", "üóÉ Customer age group"])
    
    chart_data = {
        "Ng√†y": pd.date_range(start="2025-06-01", periods=14, freq="D"),
        "Nhi·ªát ƒë·ªô (¬∞C)": [15, 16, 14, 12, 11, 15, 17, 15, 16, 14, 11, 9, 15, 11]
    }
    
    tab1.line_chart(chart_data, x="Ng√†y")
    
    data = {
        "Ng√†y": pd.date_range(start="2025-06-01", periods=14, freq="D"),
        "A": np.random.randint(10, 50, size=14),
        "B": np.random.randint(20, 60, size=14),
        "C": np.random.randint(5, 30, size=14)
    }
    
    df = pd.DataFrame(data)
    
    tab2.bar_chart(data, x="Ng√†y", stack=False)

# Hi·ªÉn th·ªã th·ªëng k√™ √¢m thanh
display_sound_history()
    
st.divider()
    
# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì m·∫´u (t√πy ch·ªçn)
display_old_charts()