import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import requests
from collections import defaultdict

API_BASE_URL = "http://localhost:8000"

def count_come_in_per_day(customers):
    if customers is None:
        return pd.DataFrame(columns=["Date", "Come in"])

    # N·∫øu l√† DataFrame r·ªóng
    if isinstance(customers, pd.DataFrame) and customers.empty:
        return pd.DataFrame(columns=["Date", "Come in"])

    # N·∫øu l√† list ho·∫∑c dict r·ªóng
    if isinstance(customers, (list, dict)) and not customers:
        return pd.DataFrame(columns=["Date", "Come in"])

    df = pd.DataFrame(customers)
    if "come_in" not in df.columns:
        return pd.DataFrame(columns=["Date", "Come in"])

    # Chuy·ªÉn datetime v√† ƒë·∫øm
    df["Date"] = pd.to_datetime(df["come_in"], errors="coerce").dt.date
    result = df.groupby("Date").size().reset_index(name="Come in")

    # B·ªï sung c√°c ng√†y b·ªã thi·∫øu
    if not result.empty:
        all_dates = pd.date_range(result["Date"].min(), result["Date"].max())
        result = result.set_index("Date").reindex(all_dates, fill_value=0)
        result.index.name = "Date"
        result = result.reset_index()
    return result


def count_age_group_per_day(customers):
    if customers is None:
        return pd.DataFrame(columns=["Date", "Children", "Teen", "Adult", "Elderly"])

    # N·∫øu l√† DataFrame r·ªóng
    if isinstance(customers, pd.DataFrame) and customers.empty:
        return pd.DataFrame(columns=["Date", "Children", "Teen", "Adult", "Elderly"])

    # N·∫øu l√† list ho·∫∑c dict r·ªóng
    if isinstance(customers, (list, dict)) and not customers:
        return pd.DataFrame(columns=["Date", "Children", "Teen", "Adult", "Elderly"])

    df = pd.DataFrame(customers)
    if "come_in" not in df.columns or "age" not in df.columns:
        return pd.DataFrame(columns=["Date", "Children", "Teen", "Adult", "Elderly"])
    
    # T·∫°o result 
    df["Date"] = pd.to_datetime(df["come_in"], errors="coerce").dt.date
    df["AgeGroup"] = df["age"]
    grouped = df.groupby(["Date", "AgeGroup"]).size().unstack(fill_value=0)
    for col in ["Children", "Teen", "Adult", "Elderly"]:
        if col not in grouped.columns:
            grouped[col] = 0
    grouped = grouped[["Children", "Teen", "Adult", "Elderly"]]
    grouped = grouped.reset_index()
    
    # B·ªï sung c√°c ng√†y b·ªã thi·∫øu
    if not grouped.empty:
        all_dates = pd.date_range(grouped["Date"].min(), grouped["Date"].max())
        grouped = grouped.set_index("Date").reindex(all_dates, fill_value=0)
        grouped.index.name = "Date"
        grouped = grouped.reset_index()
        # L·∫•y 10 ng√†y g·∫ßn nh·∫•t
        grouped["Date"] = pd.to_datetime(grouped["Date"])
        grouped = grouped.sort_values("Date").tail(10)
        grouped = grouped[["Date","Children", "Teen", "Adult", "Elderly"]]
    return grouped

def get_sound_history():
    """L·∫•y t·∫•t c·∫£ l·ªãch s·ª≠ s·ª≠ d·ª•ng √¢m thanh"""
    try:
        response = requests.get(f"{API_BASE_URL}/get-sound-history")
        if response.status_code == 200:
            return response.json().get("history", [])
        else:
            st.error(f"L·ªói l·∫•y l·ªãch s·ª≠: {response.text}")
            return []
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi API: {e}")
        return []

def display_sound_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ s·ª≠ d·ª•ng √¢m thanh"""
    st.header("üìã Th·ªëng K√™ S·ª≠ D·ª•ng √Çm Thanh")

    # T·∫°o tabs ƒë·ªÉ ph√¢n chia hi·ªÉn th·ªã
    tab1, tab2, tab3 = st.tabs(["üìä T·∫•t C·∫£ L·ªãch S·ª≠", "üë§ L·ªçc Theo Ng∆∞·ªùi D√πng", "üéµ L·ªçc Theo B·∫£n Ghi √Çm"])
    
    with tab1:
        history_data = get_sound_history()
        if history_data:
            # T·∫°o DataFrame
            df = pd.DataFrame(history_data)
            
            # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªïng L∆∞·ª£t S·ª≠ D·ª•ng", len(history_data))
            with col2:
                unique_users = df['user_name'].nunique()
                st.metric("S·ªë Ng∆∞·ªùi D√πng", unique_users)
            with col3:
                if len(history_data) > 0:
                    most_used = df['sound_name'].value_counts().index[0]
                    st.metric("√Çm Thanh Ph·ªï Bi·∫øn", most_used)
            
            # Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠ v·ªõi sorting options
            st.write("**Chi Ti·∫øt L·ªãch S·ª≠:**")
            
            # Th√™m options ƒë·ªÉ sort
            col_sort, col_order = st.columns([2, 1])
            with col_sort:
                sort_column = st.selectbox(
                    "S·∫Øp x·∫øp theo:",
                    ["M·∫∑c ƒë·ªãnh", "T√†i Kho·∫£n", "B·∫£n Ghi √Çm", "Th·ªùi Gian"],
                    key="sort_column_all"
                )
            with col_order:
                sort_ascending = st.selectbox(
                    "Th·ª© t·ª±:",
                    ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                    key="sort_order_all"
                ) == "TƒÉng d·∫ßn"
            
            # Chu·∫©n b·ªã DataFrame ƒë·ªÉ hi·ªÉn th·ªã
            display_df = df[['user_name', 'sound_name', 'timestamp']].copy()
            display_df.columns = ['T√†i Kho·∫£n', 'B·∫£n Ghi √Çm', 'Th·ªùi Gian']
            
            # Th·ª±c hi·ªán sort tr√™n to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc khi ph√¢n trang
            if sort_column != "M·∫∑c ƒë·ªãnh":
                if sort_column == "Th·ªùi Gian":
                    # Convert timestamp to datetime for proper sorting
                    display_df['Th·ªùi Gian'] = pd.to_datetime(display_df['Th·ªùi Gian'])
                
                display_df = display_df.sort_values(
                    by=sort_column, 
                    ascending=sort_ascending
                )
            
            # Reset index sau khi sort
            display_df.reset_index(drop=True, inplace=True)
            display_df.index = display_df.index + 1
            display_df.index.name = 'STT'
            
            # Hi·ªÉn th·ªã v·ªõi pagination
            items_per_page = 10
            total_items = len(display_df)
            total_pages = (total_items - 1) // items_per_page + 1
            
            if total_pages > 1:
                page = st.selectbox("Ch·ªçn trang:", range(1, total_pages + 1), key="history_page")
                start_idx = (page - 1) * items_per_page
                end_idx = start_idx + items_per_page
                
                # Hi·ªÉn th·ªã v·ªõi index b·∫Øt ƒë·∫ßu t·ª´ s·ªë th·ª© t·ª± th·ª±c t·∫ø
                page_df = display_df.iloc[start_idx:end_idx].copy()
                
                # Adjust index to show correct row numbers for current page
                page_df.index = range(start_idx + 1, min(end_idx + 1, total_items + 1))
                page_df.index.name = 'STT'
                
                st.dataframe(page_df, use_container_width=True)
                st.write(f"Hi·ªÉn th·ªã {start_idx + 1}-{min(end_idx, total_items)} c·ªßa {total_items} b·∫£n ghi")
            else:
                st.dataframe(display_df, use_container_width=True)
        else:
            st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ s·ª≠ d·ª•ng n√†o.")
    
    with tab2:
        # L·∫•y danh s√°ch t·∫•t c·∫£ user ƒë·ªÉ filter
        all_history = get_sound_history()
        if all_history:
            all_users = list(set([record['user_name'] for record in all_history]))
            selected_user = st.selectbox("Ch·ªçn t√†i kho·∫£n:", ["T·∫•t c·∫£"] + sorted(all_users), key="user_filter")
            
            if selected_user != "T·∫•t c·∫£":
                user_history = [record for record in all_history if record['user_name'] == selected_user]
                if user_history:
                    df_user = pd.DataFrame(user_history)
                    
                    # Th√™m sorting cho tab user
                    col_sort_user, col_order_user = st.columns([2, 1])
                    with col_sort_user:
                        sort_column_user = st.selectbox(
                            "S·∫Øp x·∫øp theo:",
                            ["M·∫∑c ƒë·ªãnh", "B·∫£n Ghi √Çm", "Th·ªùi Gian"],
                            key="sort_column_user"
                        )
                    with col_order_user:
                        sort_ascending_user = st.selectbox(
                            "Th·ª© t·ª±:",
                            ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                            key="sort_order_user"
                        ) == "TƒÉng d·∫ßn"
                    
                    display_df_user = df_user[['sound_name', 'timestamp']].copy()
                    display_df_user.columns = ['B·∫£n Ghi √Çm', 'Th·ªùi Gian']
                    
                    # Sort if needed
                    if sort_column_user != "M·∫∑c ƒë·ªãnh":
                        if sort_column_user == "Th·ªùi Gian":
                            display_df_user['Th·ªùi Gian'] = pd.to_datetime(display_df_user['Th·ªùi Gian'])
                        
                        display_df_user = display_df_user.sort_values(
                            by=sort_column_user, 
                            ascending=sort_ascending_user
                        )
                    
                    # Th√™m c·ªôt STT b·∫Øt ƒë·∫ßu t·ª´ 1
                    display_df_user.reset_index(drop=True, inplace=True)
                    display_df_user.index = display_df_user.index + 1
                    display_df_user.index.name = 'STT'
                    
                    st.write(f"**L·ªãch s·ª≠ c·ªßa {selected_user}:**")
                    st.dataframe(display_df_user, use_container_width=True)
                    
                    # Th·ªëng k√™ cho user n√†y
                    st.write("**Th·ªëng k√™:**")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("T·ªïng l∆∞·ª£t s·ª≠ d·ª•ng", len(user_history))
                    with col2:
                        if len(user_history) > 0:
                            most_used_by_user = df_user['sound_name'].value_counts().index[0]
                            st.metric("√Çm thanh hay d√πng nh·∫•t", most_used_by_user)
                else:
                    st.info(f"Ng∆∞·ªùi d√πng {selected_user} ch∆∞a c√≥ l·ªãch s·ª≠ s·ª≠ d·ª•ng.")
            else:
                st.info("Vui l√≤ng ch·ªçn m·ªôt t√†i kho·∫£n c·ª• th·ªÉ ƒë·ªÉ xem l·ªãch s·ª≠.")
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·ªçc.")
    
    with tab3:
        # L·ªçc theo b·∫£n ghi √¢m
        all_history = get_sound_history()
        if all_history:
            all_sounds = list(set([record['sound_name'] for record in all_history]))
            selected_sound = st.selectbox("Ch·ªçn b·∫£n ghi √¢m:", ["T·∫•t c·∫£"] + sorted(all_sounds), key="sound_filter")
            
            if selected_sound != "T·∫•t c·∫£":
                sound_history = [record for record in all_history if record['sound_name'] == selected_sound]
                if sound_history:
                    df_sound = pd.DataFrame(sound_history)
                    
                    # Th√™m sorting cho tab sound
                    col_sort_sound, col_order_sound = st.columns([2, 1])
                    with col_sort_sound:
                        sort_column_sound = st.selectbox(
                            "S·∫Øp x·∫øp theo:",
                            ["M·∫∑c ƒë·ªãnh", "T√†i Kho·∫£n", "Th·ªùi Gian"],
                            key="sort_column_sound"
                        )
                    with col_order_sound:
                        sort_ascending_sound = st.selectbox(
                            "Th·ª© t·ª±:",
                            ["TƒÉng d·∫ßn", "Gi·∫£m d·∫ßn"],
                            key="sort_order_sound"
                        ) == "TƒÉng d·∫ßn"
                    
                    display_df_sound = df_sound[['user_name', 'timestamp']].copy()
                    display_df_sound.columns = ['T√†i Kho·∫£n', 'Th·ªùi Gian']
                    
                    # Sort if needed
                    if sort_column_sound != "M·∫∑c ƒë·ªãnh":
                        if sort_column_sound == "Th·ªùi Gian":
                            display_df_sound['Th·ªùi Gian'] = pd.to_datetime(display_df_sound['Th·ªùi Gian'])
                        
                        display_df_sound = display_df_sound.sort_values(
                            by=sort_column_sound, 
                            ascending=sort_ascending_sound
                        )
                    
                    # Th√™m c·ªôt STT b·∫Øt ƒë·∫ßu t·ª´ 1
                    display_df_sound.reset_index(drop=True, inplace=True)
                    display_df_sound.index = display_df_sound.index + 1
                    display_df_sound.index.name = 'STT'
                    
                    st.write(f"**L·ªãch s·ª≠ s·ª≠ d·ª•ng b·∫£n ghi √¢m: {selected_sound}**")
                    st.dataframe(display_df_sound, use_container_width=True)
                    
                    # Th·ªëng k√™ cho b·∫£n ghi √¢m n√†y
                    st.write("**Th·ªëng k√™:**")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("T·ªïng l∆∞·ª£t ph√°t", len(sound_history))
                    with col2:
                        unique_users_for_sound = df_sound['user_name'].nunique()
                        st.metric("S·ªë ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng", unique_users_for_sound)
                    with col3:
                        if len(sound_history) > 0:
                            most_active_user = df_sound['user_name'].value_counts().index[0]
                            st.metric("Ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t", most_active_user)
                    
                    # Bi·ªÉu ƒë·ªì th·ªëng k√™ ng∆∞·ªùi d√πng
                    st.write("**Th·ªëng k√™ theo ng∆∞·ªùi d√πng:**")
                    user_counts = df_sound['user_name'].value_counts()
                    st.bar_chart(user_counts)
                else:
                    st.info(f"B·∫£n ghi √¢m {selected_sound} ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
            else:
                st.info("Vui l√≤ng ch·ªçn m·ªôt b·∫£n ghi √¢m c·ª• th·ªÉ ƒë·ªÉ xem th·ªëng k√™.")
        else:
            st.info("Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ l·ªçc.")
            
# Ph·∫ßn bi·ªÉu ƒë·ªì c≈© (c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c b·ªè t√πy √Ω)
def display_old_charts():
    import time
    st.header("üìà Bi·ªÉu ƒê·ªì M·∫´u")

    tab1, tab2 = st.tabs(["üìà Customer per day", "üóÉ Customer age group"])

    # TAB 1: Realtime fetch m·ªói 5s
    with tab1:
        if "last_fetch_tab1" not in st.session_state:
            st.session_state.last_fetch_tab1 = 0
        if time.time() - st.session_state.last_fetch_tab1 > 20 or "dataCos_tab1" not in st.session_state:
            res = requests.get("http://localhost:8000/get-info-customers")
            if res.status_code == 200:
                st.session_state.dataCos_tab1 = res.json().get("customers", [])
            else:
                st.session_state.dataCos_tab1 = []
            st.session_state.last_fetch_tab1 = time.time()
            st.rerun()
        df1 = count_come_in_per_day(st.session_state.get("dataCos_tab1", []))
        if not df1.empty:
            df1["Date"] = pd.to_datetime(df1["Date"])
            line = alt.Chart(df1).mark_line(point=alt.OverlayMarkDef(filled=True, fill='steelblue')).encode(
            x=alt.X("Date:T", title="Date"),
            y=alt.Y("Come in:Q", title="Come in"),
            tooltip=["Date", "Come in"]
            )

            points = alt.Chart(df1).mark_circle(size=100).encode(
                x="Date:T",
                y="Come in:Q",
                color=alt.value("red"),  # Ho·∫∑c d√πng color theo gi√° tr·ªã: alt.Color("Come in:Q")
                tooltip=["Date", "Come in"]
            )

            chart = (line + points).properties(
                width=700,
                height=400
            )

            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng.")

    # TAB 2: Ch·ªâ fetch l·∫°i l√∫c 23:00 ho·∫∑c khi b·∫•m n√∫t
    with tab2:
        now = time.strftime("%H:%M")
        if "last_update_11h" not in st.session_state:
            st.session_state.last_update_11h = ""
        if "dataCos_tab2" not in st.session_state:
            st.session_state.dataCos_tab2 = []
        # T·ª± ƒë·ªông c·∫≠p nh·∫≠t l√∫c 23:00
        if now == "23:00" and st.session_state.last_update_11h != time.strftime("%d/%m/%Y"):
            res2 = requests.get("http://localhost:8000/get-info-customers")
            if res2.status_code == 200:
                st.session_state.dataCos_tab2 = res2.json().get("customers", [])
                st.session_state.last_update_11h = time.strftime("%d/%m/%Y")
        # N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu tab2, l·∫•y t·ª´ tab1 (l·∫ßn fetch ƒë·∫ßu ti√™n)
        data_tab2 = st.session_state.get("dataCos_tab2", [])
        if not data_tab2 and "dataCos_tab1" in st.session_state:
            data_tab2 = st.session_state["dataCos_tab1"]
        df2 = count_age_group_per_day(data_tab2)
        # st.write(df2)
        if not df2.empty:
            # Ch·ªâ l·∫•y 10 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì (n·∫øu ch∆∞a l·∫•y ·ªü h√†m x·ª≠ l√Ω)
            df_melted = df2.melt(id_vars="Date", value_vars=["Children", "Teen", "Adult", "Elderly"],
                                var_name="AgeGroup", value_name="Count")

            # X√°c ƒë·ªãnh th·ª© t·ª± m√†u theo ƒë√∫ng √Ω
            age_order = ["Children", "Teen", "Adult", "Elderly"]
            color_scale = alt.Scale(domain=age_order,
                                    range=["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"])  # b·∫°n c√≥ th·ªÉ t√πy ch·ªânh m√†u

            chart = alt.Chart(df_melted).mark_bar().encode(
                x=alt.X("Date:T", title="Date"),
                y=alt.Y("Count:Q", stack="zero", title="Come in"),
                color=alt.Color("AgeGroup:N",
                                scale=color_scale,
                                sort=age_order,
                                legend=alt.Legend(orient="bottom", title=None)),
                tooltip=["Date", "AgeGroup", "Count"]
            ).properties(
                width=700,
                height=400,
            )

            st.altair_chart(chart, use_container_width=True)           
            #st.bar_chart(df2, x="Date", y=["Children", "Teen", "Adult", "Elderly"])
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng.")

# Hi·ªÉn th·ªã th·ªëng k√™ √¢m thanh
display_sound_history()
    
st.divider()

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì m·∫´u (t√πy ch·ªçn)
display_old_charts()
